@Library('mylibrary') _
pipeleine{
	agent none
	stage('Compile'){
	 agent {any}
	 steps{
		sh 'echo pipeline started'
		sh 'javac hello.java'
		sh 'java hello'
		sh 'ls -lrt'
		sh 'pwd'
		}
	}
	stage('sonarScanning'){
		agent {any}
		steps{
			def scannerHome = tool 'SonarQube Scanner 2.8';
			withSonarQubeEnv('My SonarQube Server') {
			sh "${scannerHome}/bin/sonar-scanner"
    }
	}
	}
	
	stage('SonarQualityGate'){
		timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
  }
  
  }
			
			
	
